{
    "title": "APK静态分析",
    "type": 2,
    "kvm": "pack18",
    "content": "<div> <p>移动应用静态分析</p> <p>本课时将会结合应用示例，讲解对移动应用进行静态分析的方法以及带领大家了解APK文件的各个组成部分。</p> <h3>使用工具：</h3> <p>移动应用静态分析工具</p> <p><span><img src='https://wiki.avlyun.org/download/attachments/55060695/image2018-1-8_13-48-12.png?version=1&amp;modificationDate=1515390492735&amp;api=v2'></span> </p> <p>此工具可以对APK文件进行逆向拆解，并提供如下信息视图：</p> <ul><li>Smali代码视图</li><li>Java代码视图</li><li>函数流程图视图</li><li>字符串视图</li><li>资源文件视图</li><li>证书信息视图</li><li>文件结构视图</li><li>程序基本信息</li> </ul> <p>同时，本工具还提供了漏洞扫描与对比分析的功能，但是在本课时，将着重使用以上各针对单个APK应用的逆向静态分析功能。</p> <p>用户可通过以下方式在分析工具中打开待测APK文件：</p> <ol><li>将待测APK文件直接拖至本工具窗口中</li><li>点击“文件”菜单并选择“打开”，并在弹窗中选择待测APK文件</li> </ol> <p>本系统提供的测试案例存放于桌面的“案例”文件夹中。</p> <h3>示例操作：</h3> <p>1、在<span>移动应用静态分析工具中加载</span>“案例”文件夹中的“案例一.apk”，加载完毕后可看到如下界面：</p> <p><span><img src='https://wiki.avlyun.org/download/attachments/55060695/image2017-12-28_15-13-24.png?version=1&amp;modificationDate=1515394712848&amp;api=v2'></span> </p> <p>其中具体地，系统界面可以分为如下几个部分：</p> <p><span><img src='https://wiki.avlyun.org/download/attachments/55060695/image2017-12-28_15-39-11.png?version=1&amp;modificationDate=1515394712878&amp;api=v2'></span> </p> <p>各个部分与界面中的对应情况如下：</p> <p><span><img src='https://wiki.avlyun.org/download/attachments/55060695/image2017-12-28_15-40-20.png?version=1&amp;modificationDate=1515394712903&amp;api=v2'></span> </p> <p>其中菜单栏多对应工具功能，此处不再赘述，本部分将结合案例，对APK文件进行遍历分析。</p> <p>2、点击工具栏的<span><img src='https://wiki.avlyun.org/download/thumbnails/55060695/image2017-12-28_16-6-5.png?version=1&amp;modificationDate=1515394712928&amp;api=v2'></span>图标，可看到如下的弹出窗口，此窗口包含了应用的基本信息，从信息中，我们可以看出应用是属于百度旗下的掌上百度应用。</p> <p><span><img src='https://wiki.avlyun.org/download/attachments/55060695/image2017-12-28_16-5-17.png?version=1&amp;modificationDate=1515394712957&amp;api=v2'></span> </p> <p>在主显示区内，点击'Certification'标签，可以看到如下的界面。此界面中包含了APK文件的证书信息，通过证书的签名，我们可以发现该应用确实是百度旗下的正规应用。通常在分析应用来源时，查看签名是否正确可以简单有效地判断一个应用是否为正规应用。当然，这种情况也存在着例外，即是开发者签名也遭到破解的情况下，这种情况相对较少数，但是一旦发生，只有通过后续的深度分析，进行排查和区别了。</p> <p><span><img src='https://wiki.avlyun.org/download/attachments/55060695/image2017-12-28_16-13-25.png?version=1&amp;modificationDate=1515394712991&amp;api=v2'></span> </p> <p>3、在通常分析APK文件时，文件内包含的诸如URL，电子邮箱或是手机号码等信息入手，进行逐步分析，本逆向分析工具提供了快速引导功能，可有效帮助使用者开始拟向分析工作。在主显示区内点击“快速引导”，可看到如下图所示的窗口。</p> <p><span><img src='https://wiki.avlyun.org/download/attachments/55060695/image2017-12-28_16-22-2.png?version=1&amp;modificationDate=1515395942863&amp;api=v2'></span>首先从URL入手，在这个标签下，分析工具会逆向解析出所有判定为URL的信息。通过对整个URL的遍历，可以看到大多数的URL都是属于baidu的域名的，少数w3.org和xmlpull.org这样定义类的组织URL，也可以理解为正常的URL。其中，我们发现了一个218.242.137.27的URL，不能立刻判定其用途，为了进一步分析，我们点击这个URL，并点击右边窗口应用了这个URL的路径：</p> <p><span><img src='https://wiki.avlyun.org/download/attachments/55060695/image2018-1-8_15-41-39.png?version=1&amp;modificationDate=1515397299049&amp;api=v2'></span> </p> <p>在对应的方法下，我们可以分别在smali代码与java代码中找到了这条URL</p> <p><span><img src='https://wiki.avlyun.org/download/attachments/55060695/image2018-1-8_15-47-51.png?version=1&amp;modificationDate=1515397671440&amp;api=v2'></span> </p> <p><span><img src='https://wiki.avlyun.org/download/attachments/55060695/image2018-1-8_15-48-7.png?version=1&amp;modificationDate=1515397687222&amp;api=v2'></span> </p> <p>4、此时，通过前后文，即可分析出该URL的具体用途（本案例中的URL作为Cache_URL被使用）。</p> <p>在跳转至引用了之前IP地址的代码段后，我们可以发现这时工具界面变成了如下所示：</p> <p><span><img src='https://wiki.avlyun.org/download/attachments/55060695/image2018-1-8_17-20-5.png?version=1&amp;modificationDate=1515403204843&amp;api=v2'></span> </p> <p>此时由“类结构显示区”和“成员结构显示区”被高亮的内容，可以定位到应用该IP代码的具体的类文件与方法名。这种由关键信息下手的方法，可以帮助分析人员快速定位到相对敏感的代码段，很大程度上避免了“大海捞针”的逐步分析的尴尬情况。</p> <p>5、上述用了从特定URL分析的方法进行了简介，同样地，可以从被判定为电话号码，或是Email的信息入手进行分析。因为这一类信息通常涉及到与外界通信的渠道，这种直接从最后的通道信息入手的分析方法可以很好地避开不必要的多余信息，做到效率最优化。</p> <p>同时，在仿真操作去安装的<span>移动应用静态分析工具的快速引导功能中，除了记录被判定为对应字符串的信息外，还会记录对Android系统包含对应功能接口进行调用的函数，如下图所示，在“案例一.apk”文件中，虽然没有记录特定的短信号信息，但是存在调用短信操作接口的代码，所以这类代码也通常会成为分析的入口。本课时以介绍方法为主，故在此不再进行更深入地介绍，大家可以后续对“案例一.apk”短信相关代码进行更深入地分析。</span> </p> <p><span><span> <img src='https://wiki.avlyun.org/download/attachments/55060695/image2018-1-8_17-41-4.png?version=1&amp;modificationDate=1515404463388&amp;api=v2'></span></span> </p> <p><span>6、如之前提到的，APK文件实际为一个压缩包文件，相当于windows系统下的zip文件。在主显示区点击Zipview，可看到如下界面：</span> </p> <p><span><span> <img src='https://wiki.avlyun.org/download/attachments/55060695/image2017-12-28_17-4-54.png?version=1&amp;modificationDate=1515404882242&amp;api=v2'></span></span> </p> <p>7、点开此时的META-INF文件夹，可以看到工具页面进行了如下的展开：</p> <p><span><img src='https://wiki.avlyun.org/download/attachments/55060695/image2018-1-8_17-51-35.png?version=1&amp;modificationDate=1515405094515&amp;api=v2'></span> </p> <p>如第一课时中介绍的，这三个文件对应的功能如下：</p> <ul><li><span>CERT.RSA：记录开发者用私钥对APK签名后的信息</span></li><li><span>MANIFEST.MF：</span><span>记录APK包中所有文件的SHA-1值</span></li><li><span>CERT.SF：与MANIFEST.MF功能相同，包含了MANIFEST.MF的所有内容与MANIFEST.MF本身的SHA-1值</span></li> </ul> <p><span>点击<span>MANIFEST.MF与 <span>CERT.SF，系统会在右边的显示区域列出文件存储路径和大小等信息；而点击<span>CERT.RSA则会打开之前展示的应用签名信息（与CertView展示的内容一样），也印证了该文件存储签名信息的作用。</span> </span></span></span> </p> <p><span><span> <span><span>8、可以发现该程序同时包含了“assets”和“res”两个文件夹，点开assets目录后，可以发现如下的布局：</span> </span></span></span> </p> <p><span><span> <span><span><span> <img src='https://wiki.avlyun.org/download/attachments/55060695/image2018-1-8_18-1-20.png?version=1&amp;modificationDate=1515405679818&amp;api=v2'></span></span> </span></span></span> </p> <p><span><span> <span><span>对比打开res文件夹后，可以看到如下的布局：</span> </span></span></span> </p> <p><span><span> <span><span><span> <img src='https://wiki.avlyun.org/download/attachments/55060695/image2018-1-8_18-11-10.png?version=1&amp;modificationDate=1515406269328&amp;api=v2'></span><span> <img src='https://wiki.avlyun.org/download/attachments/55060695/image2018-1-8_18-11-42.png?version=1&amp;modificationDate=1515406301314&amp;api=v2'></span></span> </span></span></span> </p> <p><span><span> <span><span>此时，可以看到，两个目录下都存储了各种类型的资源文件，如课时一中所描述的，assets可以以任意的路径进行存放，而res目录下则需要按照一定的要求，进行规定深度的存放。</span> </span></span></span> </p> <p><span><span> <span><span>9、点开Resources.arsc，可以看到如下的界面：</span> </span></span></span> </p> <p><span><span> <span><span><span> <img src='https://wiki.avlyun.org/download/attachments/55060695/image2018-1-8_18-42-49.png?version=1&amp;modificationDate=1515408167933&amp;api=v2'></span></span> </span></span></span> </p> <p><span><span> <span><span>此时，可以看到如之前课时一中提到的，该文件对res目录下的具体子目录下的具体文件名都标记了对应的ID，由该文件的结构，也可以看出在res目录下，所有的资源都只能存在在一级子目录下。</span> </span></span></span> </p> <p><span><span> <span><span>10、在此页面中点击AndroidManifest.xml，可看到如下的视图，如之前所述，AM文件是整个APK文件的目录，里面定义了程序运行需要的基本信息。从图中可以看到AM文件中包含的<span>应用的名字、版本、权限、引用的库文件等等，在本工具中，亦可通过点击Manifest标签，或者在“视图”选项下的Manifest，进行对AM文件的细节查看。</span></span> </span></span></span> </p> <p><span><span> <span><span><span> <img src='https://wiki.avlyun.org/download/attachments/55060695/image2018-1-8_18-52-21.png?version=1&amp;modificationDate=1515408742742&amp;api=v2'></span><br></span> </span></span></span> </p></div>"
}