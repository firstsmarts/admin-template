{
    "title": "APK漏洞分析",
    "type": 2,
    "kvm": "pack18",
    "content": "<div><p>应用权限分析</p><p>本课时将会结合应用示例，讲解对移动应用进行漏洞分析的办法。</p><h3>使用工具：</h3><p>移动应用静态分析工具</p><p><span><img src='https://wiki.avlyun.org/download/attachments/55062534/image2018-1-8_13-48-12.png?version=1&amp;modificationDate=1515466860415&amp;api=v2'></span></p><p>此工具静态分析的详细功能已经在之前的课时中进行过介绍，此部分将主要利用其漏洞分析功能。本工具的漏洞检测项目如下：</p><p><span class='confluence-embedded-file-wrapper'><img src='https://wiki.avlyun.org/download/attachments/55062534/image2018-1-9_11-18-24.png?version=1&amp;modificationDate=1515467904993&amp;api=v2'></span></p><p>其中，检测方法为分析APK文件对应的代码段，并查看代码段是否根据一定的标准设置了保护或者应对措施。</p><h3>示例操作：</h3><p>1、在本课时中，我们将仍然采用“案例一.apk”文件，打开<span>移动应用静态分析工具，并载入案例一文件。此时点击工具栏中的“安全分析”按键。</span></p><p><span><span><img src='https://wiki.avlyun.org/download/attachments/55062534/image2018-1-9_11-53-18.png?version=1&amp;modificationDate=1515469998947&amp;api=v2'></span></span></p><p><span>2、点击后，可以看到如下的界面，在标签栏多了一个“安全分析”的标签。整个安全分析过程因为涉及到对特定代码的分析和检测，会消耗一定的时间，期间大家可以切换至工具内的其他标签页面，但是对任何新APK文件进行加载操作都会终止此安全分析过程。</span></p><p><span><span><img src='https://wiki.avlyun.org/download/attachments/55062534/image2018-1-9_12-36-3.png?version=1&amp;modificationDate=1515472563053&amp;api=v2'></span></span></p><p><span>3、在经过一段时间等待后，可以看到页面进行了切换，显示如下图所示的信息：</span></p><p><span><span><img src='https://wiki.avlyun.org/download/attachments/55062534/image2018-1-9_13-42-6.png?version=1&amp;modificationDate=1515476526137&amp;api=v2'></span></span></p><p><span>可以看到共检测到了7条文件漏洞，如之前提供的列表中展示的，系统将可以检测到的漏洞分成高、中、低三个等级，其中危险等级越高的漏洞代表着其被利用后可能带来的危害程度越大。</span></p><p><span>4、对应的漏洞的名字描述在列表中可以直接看到，当前以检测到的高危漏洞为例，点击高危漏洞“Activity组件暴露风险”，可以看到如下的界面：</span></p><p><span><span><img src='https://wiki.avlyun.org/download/attachments/55062534/image2018-1-9_13-58-59.png?version=1&amp;modificationDate=1515477539542&amp;api=v2'></span></span></p><p>其中可以看到对该漏洞的描述“对activity组件保护力度不足导致安全隐患”，其中的意思大致为：在APK文件中，存在着Activity，Service，Broadcast Receiver，Content Provider等组件，部分组件在被调用或是调用其它组件时未做验证，而导致了这类组件容易被调用调试或是被监听，导致了信息泄露。</p><p>5、在对该漏洞的描述中，可以看到列表中列出了该漏洞对应的代码，在案例一.apk文件中，可以看到该漏洞主要集中在AM.xml文件中，其中主要是因为AndroidManifest.xml为清单文件，其中会包含了APK文件的组件，并定义各个组件的属性。</p><p>同时，我们可以看到，工具同时提供了建议的修改方案：<code>android:exported</code><span>&nbsp;设置为&nbsp;</span><code>false</code><span>。即是通过修改对应的属性，来达到对对应组件的保护。</span></p><p><span>工具内部推荐的解决方案是从代码层面，对APK文件进行安全性的优化，但是在实际的运用中，由于APK内部部分逻辑较复杂，实际修改这类属性可能对应用的运行带来影响。那么，我们实际还有另外一种对整个APK文件进行保护的办法，即应用加固，相关的信息将在后续其他的课程中进行介绍。</span></p><p><span>6、此时，选择中危漏洞中的“剪切板信息安全风险”，可以看到其原因是在部分敏感信息输入的时候允许用户使用剪切板功能，从而可能被攻击者监听剪切板内容导致信息泄露。</span></p><p><span><span><img src='https://wiki.avlyun.org/download/attachments/55062534/image2018-1-9_14-50-43.png?version=1&amp;modificationDate=1515480643477&amp;api=v2'></span></span></p><p><span>同样地，系统列出了对应的代码地址，并给出了解决方案。相比之前的高危漏洞，这个漏洞带来的可能风险更小。但是同时，我们也应该注意到，如果要解决这个漏洞问题，只能靠开发者从代码层面进行业务修改优化，而无法通过非开发者的加固方法进行解决。</span></p><p><span>7、对应用的漏洞分析检测，如在课程早期给出的列表中，主要会通过数据安全、组件安全、数据加密算法、权限安全和接口安全等几个方面进行检测，并针对APK文件代码进行检测。在本课程虚拟环境中提供的检测工具在检测应用漏洞的同时，亦会标记出具体包含漏洞的代码段与其文件路径，同时会给出对应的解决方法。更多的漏洞相关案例将在本课程操作案例章节中给出，大家可以结合案例，查看各个漏洞的描述，体现形式和修复办法。</span></p></div>"
}